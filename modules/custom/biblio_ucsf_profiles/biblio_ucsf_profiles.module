<?php
module_load_include('module','biblio_pm');
module_load_include('inc','biblio','includes/biblio.import.export');  
module_load_include('php','biblio_ucsf_profiles', 'lib/jsonpath-0.8.1');

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function biblio_ucsf_profiles_help($path, $arg) {
  switch ($path) {
    case "admin/help#biblio_ucsf_profiles":
      return '<p>' . t("Import Biblio nodes via PMIDs pulled from UCSF profiles") . '</p>';
      break;
  }
} 

/**
 * Implements hook_menu().
 */
function biblio_ucsf_profiles_menu() {
  $items = array();
  $items['admin/config/content/biblio/ucsf_profiles'] = array(
    'title' => 'UCSF Profiles',
    'description' => 'Configure UCSF Profiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('biblio_ucsf_profiles_form'),
    'access arguments' => array('configure biblio ucsf profiles'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/reports/ucsf_profiles'] = array(
    'title' => 'UCSF Profiles',
    'description' => 'Shows the status of the UCSF Profiles API',
    'page callback' => 'biblio_ucsf_profiles_report_page',
    'page arguments' => array('biblio_ucsf_profiles_form'),
    'access arguments' => array('access biblio ucsf profiles report'),
    'file' => 'biblio_ucsf_profiles.pages.inc',
    'type' => MENU_NORMAL_ITEM,
  );  
  return $items;
}

/**
 * Page callback: Biblio UCSF Profiles settings
 *
 * @see biblio_ucsf_profiles_menu()
 */
function biblio_ucsf_profiles_form($form, &$form_state) {
  $form['biblio_ucsf_profiles_active'] = array(
  	'#type' => 'checkbox',
  	'#title' => t('Auto-Poll UCSF Profiles for publications'),
  	'#default_value' => variable_get('biblio_ucsf_profiles_active', 1)
  );

  $form['biblio_ucsf_profiles_cron'] = array(
    '#type' => 'timeperiod_select',
    '#units' => array(
      '86400' => array('max' => 120, 'step size' => 3),
      '3600'  => array('max' => 72, 'step size'  => 12),
    ),
    '#title' => t('Import Frequency'),
    '#size' => 10,
    '#maxlength' => 10,
    // '#process' => array('form_process_radios'),
    '#description' => t('How often should I check for new publications?'),
    '#default_value' => variable_get('biblio_ucsf_profiles_cron', 3*24*60*60),
  );

  $form['biblio_ucsf_profiles_update'] = array(
    '#type' => 'timeperiod_select',
    '#units' => array(
      '86400' => array('max' => 120, 'step size' => 3),
      '3600'  => array('max' => 72, 'step size'  => 12),
    ),
    '#title' => t('Time since last update'),
    '#size' => 10,
    '#maxlength' => 10,
    // '#process' => array('form_process_radios'),
    '#description' => t('How often should I update existing publications'),
    '#default_value' => variable_get('biblio_ucsf_profiles_update', 30*24*60*60),
  );

  $form['force_poll'] = array(
  	  '#type' => 'submit',
      '#value' => 'Force API Poll',
      '#submit' => array('biblio_ucsf_profiles_force_poll'),
      '#description' => t('Poll all pubs (new and existing)')

	);

  return system_settings_form($form);
}


/**
 * Form submission handler for Force Poll.
 *
 * @param array $form
 *   The form being used to edit the module settings.
 *
 * @param array $form_state
 *   An associative array containing the current state of the form.
 */
function biblio_ucsf_profiles_force_poll($form, &$form_state) {
  $batch = array(
    'operations' => array(),
    'finished' => 'biblio_ucsf_profiles_batch_finished',
    'title' => t('Import publications from UCSF Profiles'),
    'init_message' => t('Import is starting...'),
    'progress_message' => t('Imported @current of @total profiles.'),
    'error_message' => t('Import error has occurred.')
  );
         
  $profiles = _biblio_ucsf_profiles_users()->execute();

  while ($profile = $profiles->fetchObject()) {

    $update            = new stdClass();
    $update->uid       = $profile->uid;
    $update->timestamp = REQUEST_TIME;
    $update->ucsf_id   = $profile->ucsf_id;  
    $pmids = _fetch_new_ucsf_profiles_pmids($profile->ucsf_id);

    if ($pmids) {
      $batch['operations'][] = array('biblio_ucsf_profiles_batch_process', array($profile->ucsf_id,$pmids));      
      $update->status = 'valid';
    } elseif($profile->status == 'valid') {
      drupal_set_message(
        "($profile->name:$profile->ucsf_id) has no new imports or updates at this time.",
        'status');
    }
    else {
      drupal_set_message(
        "UCSF Profiles returned no results for ($profile->name:$profile->ucsf_id)",
        'status');
      $update->status = 'error';
    }

    
    if (is_null($profile->status)) {
      drupal_write_record('biblio_ucsf_profiles', $update);
    } else {
      drupal_write_record('biblio_ucsf_profiles', $update, 'uid');
    }
  }

  batch_set($batch);
  batch_process('admin/config/content/biblio/ucsf_profiles');
}


/**
 * The batch processor.
 */
function biblio_ucsf_profiles_batch_process($ucsf_id,$pmids,&$context) {  
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_query(
        "SELECT COUNT(DISTINCT u.uid) FROM {users} AS u
         LEFT JOIN {field_data_field_text} AS t
          ON t.bundle = 'user' AND t.entity_type = 'user' AND t.entity_id = u.uid
         LEFT JOIN {biblio_ucsf_profiles} AS b
          ON b.uid = u.uid
         WHERE b.status is null
          OR b.status <> 'error'
          OR (  
                b.status = 'error'
                AND t.field_text_value <> b.ucsf_id
             )"
    )->fetchField();
  }
  
  $context['sandbox']['progress']++;
  $context['message'] = "Importing publications for $ucsf_id...\n";
  biblio_pm_import_ids($pmids,$terms=array(),$batch=TRUE);  

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * The batch finish handler.
 */
function biblio_ucsf_profiles_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message('Import is complete!');
  }
  else {
    $error_operation = reset($operations);
    $message = t('An error occurred while processing %error_operation with arguments: @arguments', array(
      '%error_operation' => $error_operation[0],
      '@arguments' => print_r($error_operation[1], TRUE)
    ));
    drupal_set_message($message, 'error');
  }
  drupal_set_message(l('Run again', 'admin/config/content/biblio/ucsf_profiles'));
}




/**
 * Implements hook_cron_queue_info().
 * See: https://api.drupal.org/api/drupal/modules%21system%21system.api.php/function/hook_cron_queue_info/7
 */
function biblio_ucsf_profiles_cron_queue_info() {
  $queues['biblio_ucsf_profiles'] = array(
    'worker callback' => 'biblio_ucsf_profiles_queue_process',
    'time' => 30 * 60, //30 min * 60sec
  );
  return $queues;
}

/**
 * Implements hook_cron().
 */
function biblio_ucsf_profiles_cron() {
  if (variable_get('biblio_ucsf_profiles_active', FALSE)) {
    $queue = DrupalQueue::get('biblio_ucsf_profiles');

    $query = _biblio_ucsf_profiles_users();
    $query->condition('(UNIX_TIMESTAMP(NOW()) - b.timestamp)', variable_get('biblio_ucsf_profiles_cron',0), '>');
    $profiles = $query->execute();

    while ($profile = $profiles->fetchObject()) {
      $pmids = _fetch_new_ucsf_profiles_pmids($profile->ucsf_id);
      $queue->createItem($pmids);
    }
  }
}

/**
 * The queue processor.
 */
function biblio_ucsf_profiles_queue_process($item) {
    biblio_pm_import_ids($item,$terms=array(),$batch=TRUE);  
}

/**
 * Implements hook_views_api().
 */
function biblio_ucsf_profiles_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'biblio_ucsf_profiles') . '/views',
  );
}

/**
 * Implements hook_permission().
 */
function biblio_ucsf_profiles_permission() {
  return array(
    'access biblio ucsf profiles report' => array(
      'title' => t('Access Bilio UCSF Profiles report'),
      'description' => t('Allows user to access the UCSF Profiles API report.'),
    ),
    'configure biblio ucsf profiles' => array(
      'title' => t('Access Biblio UCSF Profiles configuration'),
      'description' => t('Allows user to configure UCSF Profiles imports.'),
    ),
  );
}


/**
 * Fetch data from UCSF Profiles
 * Returns and array of new PMIDs and "expired" pmids.
 * expirations is determined by pmids older than biblio_ucsf_profiles_update
 */
function _fetch_new_ucsf_profiles_pmids($id){
  // Profiles API 
  // @see http://opendata.profiles.ucsf.edu/
  $api = "http://api.profiles.ucsf.edu/json/v2/?publications=full&source=gladstoneinstitutes.org";
  $options = array(
    'headers' => array(),
    'method' => 'GET',
    'data' => NULL,
    'max_redirects' => 0,
    'timeout' => 30.0,
    'context' => NULL
  );

  // Fetch json data
  $pubs = array();
  $err = FALSE;
  if (preg_match('/\w+/', $id)) {
    $url = $api."&ProfilesURLName=".$id;
    $json = drupal_json_decode( drupal_http_request($url,$options)->data);
    $err  = jsonPath($json,'$.error');

    if (!$err) {
      $pubs = jsonPath($json,'$.Profiles[0].Publications.*.PublicationSource[0].PMID');
    }    
  }

  // Filter duplicates and known pmids from set
  if (!$err && is_array($pubs) && count($pubs) > 0) {
    $pubs = array_filter($pubs);
    $known_pmids  = db_select('biblio_pubmed','b')
                    ->fields('b',array('biblio_pubmed_id'))
                    ->condition('b.biblio_pubmed_id',$pubs,'IN')
                    ->execute()->fetchCol();
    $update_pmids = db_query(
      "SELECT biblio_pubmed_id
       FROM {biblio_pubmed} as b
       WHERE (UNIX_TIMESTAMP(NOW()) - biblio_pm_changed) > :update_threshold
       AND biblio_pubmed_id in (:ucsf_profiles_pmids);",
       array( ':update_threshold'    => variable_get('biblio_ucsf_profiles_update'),
              ':ucsf_profiles_pmids' => $pubs
       )
    )->fetchCol();
    $new_pmids = array_diff($pubs,$known_pmids);

    return $new_pmids + $update_pmids;
  }

  return false;
}

/**
 * Return a query object of all users with valid ucsf profiles accounts
 */
function _biblio_ucsf_profiles_users() {
    $query = db_select('users', 'u')
          ->fields('u',array('uid','name'));
          // ->condition('u.status', 0,'<>')
          // ->condition('u.uid', 1,'>');
    $query->leftjoin('field_data_field_text','t',
        "u.uid = t.entity_id AND t.entity_type = 'user' AND t.bundle = 'user'");
    $query->addField('t','field_text_value','ucsf_id'); 
    $query->leftjoin('biblio_ucsf_profiles','b','b.uid = u.uid');
    $query->addField('b','ucsf_id','last_used_ucsf_id'); 
    $query->fields('b',array('status','timestamp'));
    $query->where("u.status <> 0 
                   AND u.uid > 1
                   AND (
                      b.status IS NULL
                      OR b.status <> 'error'
                      OR (
                        b.status = 'error'
                        AND t.field_text_value <> b.ucsf_id
                      )
                   )");
    return $query;
}
